# app.py
import streamlit as st
from PIL import Image, ImageOps
import torch
from torchvision import transforms
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üöó CarFix ‚Äî –û—Ü–µ–Ω–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞",
    page_icon="üöó",
    layout="centered"
)

# –õ–æ–≥–æ—Ç–∏–ø –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
col1, col2 = st.columns([1, 4])
with col1:
    if os.path.exists("logo.png"):
        st.image("logo.png", width=80)
with col2:
    st.title("CarFix ‚Äî –û—Ü–µ–Ω–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞")

st.markdown("### üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
st.write("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ü–µ–Ω–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ –≤ —Ä—É–±–ª—è—Ö.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–∫–µ—à–∏—Ä—É–µ—Ç—Å—è)
@st.cache_resource
def load_model():
    model = torch.jit.load("car_damage_model_ef.pt")
    model.eval()
    with open("norm_params_ef.json") as f:
        norm_params = json.load(f)
    return model, norm_params

model, norm_params = load_model()

# –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏)
def preprocess_image(image):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É 224x224 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π (padding)"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
    image = image.convert("RGB")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: –¥–æ–±–∞–≤–ª—è–µ–º padding –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
    image = ImageOps.fit(image, (224, 224), method=Image.Resampling.LANCZOS, centering=(0.5, 0.5))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    return transform(image)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG/PNG, –¥–æ 10 –ú–ë)",
    type=["jpg", "jpeg", "png"],
    accept_multiple_files=False
)

if uploaded_file is not None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if uploaded_file.size > 10 * 1024 * 1024:
        st.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 10 –ú–ë.")
    else:
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(uploaded_file)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            with st.spinner("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ..."):
                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥ –º–æ–¥–µ–ª—å
                input_tensor = preprocess_image(image).unsqueeze(0)
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                with torch.no_grad():
                    pred_norm = model(input_tensor).item()
                
                # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                pred = pred_norm * norm_params["std"] + norm_params["mean"]
                pred = max(0, pred)  # –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            st.success(f"### üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞: **{pred:,.0f} —Ä—É–±.**")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            st.info(
                "‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
                "–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ¬±1000 —Ä—É–±. "
                "–†–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π."
            )
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

# –ü–æ–¥–≤–∞–ª
st.markdown("---")
st.caption("¬© 2025 CarFix AI | –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")